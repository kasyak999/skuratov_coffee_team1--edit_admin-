from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import ContextTypes, ConversationHandler

from app.core.db import async_session_maker
from app.crud.user_crud import crud_user


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        if update.message:
            await update.message.reply_text(
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=ReplyKeyboardRemove()
            )
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=None
            )

        # –û—á–∏—â–∞–µ–º user_data
        if context.user_data:
            context.user_data.clear()

        return await show_start_menu(update, context)
    except Exception:
        return ConversationHandler.END


async def show_start_menu(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    role_mapping = {
        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'manager': '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π',
        'barista': '–ë–∞—Ä–∏—Å—Ç–∞',
    }

    async with async_session_maker() as session:
        user = await crud_user.get_by_telegram_id(
            update.effective_user.id, session=session
        )

    if not user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ë–∞—Ä–∏—Å—Ç–∞',
                    callback_data='register_barista',
                )
            ]
        ])
        text = '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. '
        '–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ë–∞—Ä–∏—Å—Ç–∞?'
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user.role == 'admin':
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    '‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    callback_data='create_user'
                )],
                [InlineKeyboardButton(
                    '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ñ–µ',
                    callback_data='create_cafe'
                )],
                [InlineKeyboardButton(
                    'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    callback_data='edit_user'
                )],
                [InlineKeyboardButton(
                    'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ñ–µ',
                    callback_data='edit_cafe'
                )],
                [InlineKeyboardButton("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data="none")],
                [InlineKeyboardButton(
                    '‚ûï –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    callback_data='user_conf'
                )],
                [InlineKeyboardButton(
                    '‚ûï –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É',
                    callback_data='employment_conf'
                )],
                [InlineKeyboardButton(
                    'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–º–µ–Ω –∫–∞—Ñ–µ',
                    callback_data='monitoring'
                )],
                [InlineKeyboardButton(
                    '‚ûï –°–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç',
                    callback_data='create_shift'
                )],
                [InlineKeyboardButton(
                    'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç',
                    callback_data='edit_shifts'
                )],
            ])
        elif user.role == 'manager':
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    '‚ûï –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    callback_data='user_conf'
                )],
                [InlineKeyboardButton(
                    '‚ûï –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É',
                    callback_data='employment_conf'
                )],
                [InlineKeyboardButton(
                    'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–º–µ–Ω –∫–∞—Ñ–µ',
                    callback_data='monitoring'
                )],
                [InlineKeyboardButton(
                    '‚ûï –°–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç',
                    callback_data='create_shift'
                )],
                [InlineKeyboardButton(
                    'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç',
                    callback_data='edit_shifts'
                )],
                [
                    InlineKeyboardButton(
                        'üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                        callback_data='change_booking',
                    )
                ],
            ])
        elif user.role == 'barista' and user.is_active is True:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    '‚ûï –≤—ã–±–æ—Ä —Å–º–µ–Ω –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É',
                    callback_data='barista_slots'
                )],
                [InlineKeyboardButton(
                    'üìä –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö —Å–º–µ–Ω',
                    callback_data='my_slots'
                )],
                [InlineKeyboardButton(
                    '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Å–º–µ–Ω—É',
                    callback_data='going'
                )],
            ],
            )
        else:
            keyboard = None

        text = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {role_mapping[user.role]}!'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if update.message:
        await update.message.reply_text(text, reply_markup=keyboard)
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            text,
            reply_markup=keyboard
        )
        await update.callback_query.answer()

    return ConversationHandler.END
