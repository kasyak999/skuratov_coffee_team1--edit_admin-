"""–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞—Ä–∏—Å—Ç–∞."""
import logging
from enum import IntEnum
from typing import Optional, Sequence

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,  # –æ–±–æ–ª–æ—á–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
    CallbackQueryHandler,  # –ª–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ Inline-–∫–Ω–æ–ø–∫–∏
    CommandHandler,  # –ª–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ /user_conf
    ContextTypes,  # —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (update + context)
    ConversationHandler,  # —É–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏
)

from app.core.db import async_session_maker
from app.crud.user_crud import crud_user
from app.exceptions.common_exceptions import NotFoundError, ValidationError
from app.schemas.user_schema import UserRead
from app.telegram_bot.commands import show_start_menu
from app.telegram_bot.handlers.base import BaseHandler

logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
class ConfirmStates(IntEnum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞—Ä–∏—Å—Ç–∞."""

    SELECTING = 0  # –≤—ã–±–æ—Ä –±–∞—Ä–∏—Å—Ç–∞
    DECIDING  = 1  # –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è (–¥–∞/–Ω–µ—Ç)


# Callback-–ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
CB_APPROVE_PREFIX = 'approve_'                   # approve_<id> ‚Äî ¬´–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª
CB_CANCEL         = 'cancel_'                    # cancel_        ‚Äî ¬´–æ—Ç–º–µ–Ω–∞¬ª
CB_YES            = 'yes'                        # yes            ‚Äî ¬´–¥–∞¬ª
CB_NO             = 'no'                         # no             ‚Äî ¬´–Ω–µ—Ç¬ª
CB_BACK           = 'back'                       # back           ‚Äî ¬´–Ω–∞–∑–∞–¥¬ª

APPROVE_PATTERN  = rf'^{CB_APPROVE_PREFIX}\d+$'  #  approve_123
CANCEL_PATTERN   = rf'^{CB_CANCEL}$'           #  cancel_
DECISION_PATTERN = (
    rf'^({CB_YES}|{CB_NO}|{CB_BACK})$'  # yes –∏–ª–∏ no –∏–ª–∏ back
)
# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MSG_SELECT_BARISTA = (
    '<b>–°–ø–∏—Å–æ–∫ –±–∞—Ä–∏—Å—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>\n\n'
    '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:'
)
MSG_NO_BARISTAS = (
    '‚ÑπÔ∏è <b>–ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –±–∞—Ä–∏—Å—Ç–∞</b>\n\n'
    '–í—Å–µ –∑–∞—è–≤–∫–∏ —É–∂–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã.\n'
    '–ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –∑–∞–Ω—è—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ ‚òï'
)
MSG_CANCELLED      = '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.'
MSG_CONFIRM_PROMPT = (
    '   <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–∞—Ä–∏—Å—Ç–∞?</b>\n\n'
    'üë§ <b>–ò–º—è:</b> {name}\n'
    'üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n'
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —ç—Ç–æ–≥–æ –±–∞—Ä–∏—Å—Ç–∞.'
)

MSG_SERVER_ERROR = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
MSG_SELECTION_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞.'
MSG_NOT_FOUND = '–ë–∞—Ä–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.'
MSG_UNKNOWN_ERROR = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
MSG_BARISTA_APPROVED = '‚úÖ –ë–∞—Ä–∏—Å—Ç–∞ {name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.'
MSG_BARISTA_DECLINED = '‚ùå –ë–∞—Ä–∏—Å—Ç–∞ {name} –æ—Ç–∫–ª–æ–Ω—ë–Ω.'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_VALIDATION_ERROR = 'ValidationError: {message}'
LOG_NOT_FOUND_ERROR = 'NotFoundError: {message}'
LOG_UNKNOWN_ERROR = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±–∞—Ä–∏—Å—Ç–∞: {exc}'

# –ö–Ω–æ–ø–∫–∏
LABEL_CANCEL = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'
LABEL_YES    = '‚úÖ –î–∞'
LABEL_NO     = '‚ùå –ù–µ—Ç'
LABEL_BACK   = 'üîô –ù–∞–∑–∞–¥'

SELF_TG_ID = "" #–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–≥


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —Å–ø–∏—Å–æ–∫ –±–∞—Ä–∏—Å—Ç–∞
def build_selection_keyboard(
        baristas: Sequence[UserRead]
) -> InlineKeyboardMarkup:
    """InlineKeyboardMarkup —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –±–∞—Ä–∏—Å—Ç–∞."""
    buttons = []
    for barista in baristas:
        buttons.append([
            InlineKeyboardButton(
                text=(
                    f'üë§ {barista.name.strip()} ‚Ä¢ '
                    f'–¢–µ–ª–µ—Ñ–æ–Ω {barista.phone.strip()}'
                ),
                callback_data=f'{CB_APPROVE_PREFIX}{barista.id}'
            )
        ])
    buttons.append([InlineKeyboardButton(
        text=LABEL_CANCEL,
        callback_data=CB_CANCEL)])
    return InlineKeyboardMarkup(buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —Ä–µ—à–µ–Ω–∏–µ ¬´–î–∞/–ù–µ—Ç/–ù–∞–∑–∞–¥¬ª
def build_decision_keyboard() -> InlineKeyboardMarkup:
    """InlineKeyboardMarkup —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏: –î–∞, –ù–µ—Ç –∏ –ù–∞–∑–∞–¥."""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton(text=LABEL_YES, callback_data=CB_YES),
        InlineKeyboardButton(text=LABEL_NO, callback_data=CB_NO),
        InlineKeyboardButton(text=LABEL_BACK, callback_data=CB_BACK),
    ]])


class ConfirmBaristaHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /user_conf ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±–∞—Ä–∏—Å—Ç–∞."""

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConfirmBaristaHandler."""
        self.states = ConfirmStates

    async def get_baristas_unconfirmed(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """/user_conf ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –±–∞—Ä–∏—Å—Ç–∞."""
        try:
            async with async_session_maker() as session:
                baristas = await crud_user.get_pending_baristas(session)

            if not baristas:
                if update.callback_query:
                    await update.callback_query.message.reply_text(
                        MSG_NO_BARISTAS, parse_mode='HTML')
                else:
                    await self.send_text_safely(update, MSG_NO_BARISTAS)
                await show_start_menu(update, context)
                return ConversationHandler.END

            keyboard = build_selection_keyboard(baristas)
            await self.send_text_safely(
                update,
                MSG_SELECT_BARISTA,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            return self.states.SELECTING

        except Exception as error:
            logger.exception(LOG_UNKNOWN_ERROR.format(exc=error))
            await self.send_text_safely(update, MSG_SERVER_ERROR)
            return await show_start_menu(update, context)

    async def selecting_barista(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –±–∞—Ä–∏—Å—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã."""
        query = update.callback_query
        await query.answer()
        data = query.data

        if data == CB_CANCEL:
            await self.send_text_safely(update, MSG_CANCELLED)
            return await show_start_menu(update, context)

        try:
            # –∏–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∫–æ–ª–ª–±–µ–∫–∞: 'approve_123' ‚Üí 123
            barista_id = int(data.replace(CB_APPROVE_PREFIX, ''))
            context.user_data['barista_id'] = barista_id

            # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ä–∏—Å—Ç–∞ –∏–∑ –ë–î
            async with async_session_maker() as session:
                user = await crud_user.get_or_404(barista_id, session)
                context.user_data['barista_name'] = user.name
                context.user_data['barista_phone'] = user.phone

            await query.edit_message_text(
                MSG_CONFIRM_PROMPT.format(name=user.name, phone=user.phone),
                reply_markup=build_decision_keyboard(),
                parse_mode='HTML'
            )
            return self.states.DECIDING

        except Exception as error:
            logger.exception(LOG_UNKNOWN_ERROR.format(exc=error))
            await self.send_text_safely(update, MSG_SELECTION_ERROR)
            return await show_start_menu(update, context)

    def notification(self, decision: str, telegram_id: int) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        from app.tasks.activity_barista import activity_barista
        activity_barista.delay(
            status=decision,
            barista_tg_id=SELF_TG_ID#telegram_id),
        )

    async def processing_decision(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è ‚Äî ¬´–¥–∞¬ª, ¬´–Ω–µ—Ç¬ª –∏–ª–∏ ¬´–Ω–∞–∑–∞–¥¬ª."""
        query = update.callback_query
        await query.answer()
        decision = query.data
        barista_id = context.user_data.get('barista_id')

        if decision == CB_BACK:
            # –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É barista
            return await self.get_baristas_unconfirmed(update, context)
        try:
            async with async_session_maker() as session:
                user = await crud_user.get_or_404(barista_id, session)

                if decision == CB_YES:
                    await crud_user.activate_user(user, session)
                    text = MSG_BARISTA_APPROVED.format(name=user.name)
                    logger.info(MSG_BARISTA_APPROVED.format(name=user.name))
                else:
                    #await crud_user.deactivate_user(user, session)
                    # crud –±—É–¥–µ—Ç –≤–µ—á–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É
                    # —Ç–∞–∫ –∫–∞–∫ –±–∞—Ä–∏—Å—Ç—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    # –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—å—Å—è –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã
                    text = MSG_BARISTA_DECLINED.format(name=user.name)

                    logger.info(MSG_BARISTA_DECLINED.format(name=user.name))
                self.notification(
                    decision,
                    SELF_TG_ID)#user.telegram_id)

        except ValidationError as error:
            logger.warning(LOG_VALIDATION_ERROR.format(message=error.message))
            text = f'{error.message}'

        except NotFoundError as error:
            logger.warning(LOG_NOT_FOUND_ERROR.format(message=error.message))
            text = MSG_NOT_FOUND

        except Exception as error:
            logger.exception(LOG_UNKNOWN_ERROR.format(exc=error))
            text = MSG_UNKNOWN_ERROR

        await query.edit_message_text(text)
        return await show_start_menu(update, context)

    async def send_text_safely(
            self,
            update: Update,
            text: str,
            *,
            reply_markup: InlineKeyboardMarkup | None = None,
            parse_mode: Optional[str] = None
    ) -> None:
        """–ú–µ—Ç–æ–¥ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if update.message:
            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode)
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode)

    def get_conversation_handler_baristas(self) -> ConversationHandler:
        """–°–æ–±–∏—Ä–∞–µ–º ConversationHandler –¥–ª—è /user_conf."""
        return ConversationHandler(
            entry_points=[
                CommandHandler(
                    'user_conf',
                    self.get_baristas_unconfirmed),
                CallbackQueryHandler(
                    self.get_baristas_unconfirmed,
                    pattern="^user_conf$")
            ],
            states={
                self.states.SELECTING: [
                    CallbackQueryHandler(
                        self.selecting_barista,
                        pattern=APPROVE_PATTERN),
                    CallbackQueryHandler(
                        self.selecting_barista,
                        pattern=CANCEL_PATTERN),
                ],
                self.states.DECIDING: [
                    CallbackQueryHandler(
                        self.processing_decision,
                        pattern=DECISION_PATTERN),
                ],
            },
            fallbacks=[CommandHandler(
                'cancel',
                self.cancel)],
            per_message=False,
            allow_reentry=True,
        )

    def setup(self, app: Application) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""
        app.add_handler(self.get_conversation_handler_baristas())
