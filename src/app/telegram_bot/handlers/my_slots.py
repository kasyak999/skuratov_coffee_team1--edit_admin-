"""–ú–æ–¥—É–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /my_slots (–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö —Å–º–µ–Ω –±–∞—Ä–∏—Å—Ç–æ–π)."""

import logging

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

from app.core.db import async_session_maker
from app.crud.reservation_crud import reservation_crud
from app.crud.user_crud import crud_user
from app.models.reservation import Status as ReservationStatus
from app.models.user import Role
from app.telegram_bot.commands import show_start_menu

logger = logging.getLogger(__name__)


class MySlotsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_slots."""

    def __init__(self) -> None:
        """–°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π."""
        self.status_translation = {
            ReservationStatus.RESERVED: "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ",
            ReservationStatus.ONCONFIRM: "–ù–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏",
            ReservationStatus.ATTENDED: "–ü–æ—Å–µ—â–µ–Ω–æ",
            ReservationStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω–æ"
        }

    async def show_my_slots(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω –±–∞—Ä–∏—Å—Ç—ã."""
        try:
            if update.callback_query:
                query = update.callback_query
                await query.answer()
                message = query.message
                telegram_id = query.from_user.id
            else:
                message = update.message
                telegram_id = update.effective_user.id

            async with async_session_maker() as session:
                # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await crud_user.get_by_telegram_id(telegram_id, session)
                if not user or user.role != Role.BARISTA:
                    await message.reply_text(
                        "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –±–∞—Ä–∏—Å—Ç–∞–º.")
                    return await show_start_menu(update, context)

                # 2. –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                reservations = await reservation_crud.get_by_user(
                    user.id, session)
                if not reservations:
                    await message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω.")
                    return await show_start_menu(update, context)

                # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                slots_info = []
                for reservation in reservations:
                    await session.refresh(reservation, ['shift'])
                    shift = reservation.shift
                    if not shift:
                        continue

                    await session.refresh(shift, ['cafe'])
                    cafe_name = shift.cafe.name if shift.cafe else "‚ùå –ö–∞—Ñ–µ –Ω–µ"
                    " —É–∫–∞–∑–∞–Ω–æ"

                    status_emoji = {
                        ReservationStatus.RESERVED: "üü°",
                        ReservationStatus.ONCONFIRM: "üü†",
                        ReservationStatus.ATTENDED: "üü¢",
                        ReservationStatus.CANCELLED: "üî¥",
                    }.get(reservation.status, "‚ö™")

                    status_text = self.status_translation.get(
                        reservation.status,
                        reservation.status.value
                    )

                    slots_info.append(
                        f"{status_emoji} *"
                        f"{shift.start_time.strftime('%d.%m.%Y %H:%M')}‚Äì"
                        f"{shift.end_time.strftime('%H:%M')}*\n"
                        f"üè† {cafe_name}\n"
                        f"üìå –°—Ç–∞—Ç—É—Å: {status_text}\n"
                    )

                # 4. –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = [
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                          callback_data="refresh_my_slots"),
                     InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                                          callback_data="cancel_to_menu")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                if update.callback_query:
                    await message.edit_text(
                        "üìÖ *–í–∞—à–∏ —Å–º–µ–Ω—ã:*\n\n" + "\n".join(slots_info),
                        reply_markup=reply_markup,
                        parse_mode="Markdown",
                    )
                else:
                    await message.reply_text(
                        "üìÖ *–í–∞—à–∏ —Å–º–µ–Ω—ã:*\n\n" + "\n".join(slots_info),
                        reply_markup=reply_markup,
                        parse_mode="Markdown",
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_my_slots: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–º–µ–Ω")

    async def refresh_my_slots(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω."""
        try:
            await self.show_my_slots(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω: {e}")
            await update.callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    async def cancel_to_menu(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        query = update.callback_query
        await query.answer()
        await show_start_menu(update, context)

    def setup_handlers(self, application: Application) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω."""
        handler = MySlotsHandler()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_slots
        application.add_handler(CommandHandler(
            "my_slots", handler.show_my_slots))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        application.add_handler(
            CallbackQueryHandler(handler.refresh_my_slots,
                                 pattern="^refresh_my_slots$")
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Å–º–µ–Ω—ã" –∏–∑ –º–µ–Ω—é
        application.add_handler(
            CallbackQueryHandler(handler.show_my_slots, pattern="^my_slots$")
        )
        application.add_handler(
            CallbackQueryHandler(self.cancel_to_menu,
                                 pattern="^cancel_to_menu$")
        )
