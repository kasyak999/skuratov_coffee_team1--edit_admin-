"""–ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ñ–µ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""

import logging
from datetime import datetime, time

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from app.core.db import async_session_maker
from app.crud.cafe_crud import cafe_crud
from app.crud.shift_crud import shift_crud
from app.crud.user_crud import crud_user
from app.schemas.shift_schema import ShiftCreate
from app.telegram_bot.commands import cancel, show_start_menu

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ñ–µ
EDIT_SHIFT_FIELDS, CONFIRM_SHIFT_DATA = range(2)


class CreateShiftHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
        self.shift_crud = shift_crud
        self.shift_data_template = {
            'date': None,
            'start_time': None,
            'end_time': None,
            'barista_count': None,
            'cafe_id': None,
        }

    async def initialize_shift_data(
        self, context: ContextTypes.DEFAULT_TYPE, user_id: int = None
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞."""
        if 'new_shift' not in context.user_data:
            # –ü–æ–ª—É—á–∞–µ–º cafe_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cafe_id = None
            start_time = None
            end_time = None
            if user_id:
                async with async_session_maker() as session:
                    user = await crud_user.get_by_telegram_id(user_id, session)
                    if user and user.cafe_id:
                        cafe_id = user.cafe_id
            if cafe_id:
                async with async_session_maker() as session:
                    cafe = await cafe_crud.get_or_404(cafe_id, session)
                    if cafe and cafe.open_time:
                        start_time = cafe.open_time
                    if cafe and cafe.close_time:
                        end_time = cafe.close_time
            # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º cafe_id
            self.shift_data_template = {
                'date': datetime.now().date(),
                'start_time': start_time,
                'end_time': end_time,
                'barista_count': None,
                'cafe_id': cafe_id,  # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º cafe_id
            }

            context.user_data['new_shift'] = self.shift_data_template.copy()

    async def edit_shift_fields(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—è —Å–ª–æ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        query = update.callback_query
        if query:
            await query.answer()  #

        await self.initialize_shift_data(context)
        shift_data = context.user_data['new_shift']

        buttons = []
        fields = [
            ('date', '–î–∞—Ç–∞ —Å–º–µ–Ω—ã (–î–î.MM.–ì–ì–ì–ì)'),
            ('start_time', '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (–ß–ß:–ú–ú)'),
            ('end_time', '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã(–ß–ß:–ú–ú)'),
            ('barista_count', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–∏—Å—Ç–∞ –≤ —Å–º–µ–Ω—É'),
            ('cafe_id', 'ID –∫–∞—Ñ–µ'),
        ]

        for field, label in fields:
            field_value = shift_data[field] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            buttons.append([
                InlineKeyboardButton(
                    f'{label}: {field_value}',
                    callback_data=f'edit_shift_{field}',
                )
            ])

        buttons.append([
            InlineKeyboardButton(
                '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ—Ç', callback_data='save_shift'
            ),
            InlineKeyboardButton(
                '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_shift_creation'
            ),
        ])

        keyboard = InlineKeyboardMarkup(buttons)
        message = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–∞:\n'

        try:
            if query:
                try:
                    await query.edit_message_text(
                        message, reply_markup=keyboard
                    )
                except Exception as e:
                    logger.warning('Failed to edit message: %s', e)
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=message,
                        reply_markup=keyboard,
                    )
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=message,
                    reply_markup=keyboard,
                )
        except Exception as e:
            logger.error('Error in edit_shift_fields: %s', e)
            return await show_start_menu(update, context)

        return EDIT_SHIFT_FIELDS

    async def proceed_to_create_shift(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞."""
        query = update.callback_query
        await query.answer()

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–º–µ–Ω
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=query.message.message_id,
        )

        return await self.edit_shift_fields(update, context)

    async def create_shift_start(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """C–æ–∑–¥–∞–Ω–∏t —Å–ª–æ—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–º–µ–Ω."""
        query = update.callback_query
        if query:
            await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ update
        user_id = update.effective_user.id

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º cafe_id
        await self.initialize_shift_data(context, user_id)
        shift_data = context.user_data['new_shift']
        cafe_id = shift_data['cafe_id']

        if cafe_id:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–º–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞—Ñ–µ
            async with async_session_maker() as session:
                shifts = await shift_crud.get_multi(
                    cafe_id=cafe_id, session=session
                )

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω
                if shifts:
                    shifts_list = ''
                    for i, shift in enumerate(shifts, 1):
                        shifts_list += (
                            f'{i}. {shift.start_time.strftime("%d.%m.%Y")} '
                            f'{shift.start_time.strftime("%H:%M")}-'
                            f'{shift.end_time.strftime("%H:%M")}\n'
                            f'   üë• –ë–∞—Ä–∏—Å—Ç–∞: {shift.barista_count}\n'
                        )
                    message = (
                        f'üìÖ –¢–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã –∫–∞—Ñ–µ:\n'
                        f'{shifts_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
                    )
                else:
                    message = (
                        '‚ÑπÔ∏è –î–ª—è —ç—Ç–æ–≥–æ –∫–∞—Ñ–µ –µ—â–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω.\n\n'
                        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
                    )

                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É',
                            callback_data='proceed_to_create_shift',
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                            callback_data='cancel_shift_creation',
                        )
                    ],
                ])

                if query:
                    await query.edit_message_text(
                        message, reply_markup=keyboard
                    )
                else:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=message,
                        reply_markup=keyboard,
                    )

                return CONFIRM_SHIFT_DATA
        else:
            await update.message.reply_text(
                '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ñ–µ.'
                '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
            )
            return await show_start_menu(update, context)

    async def edit_shift_field(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è."""
        query = update.callback_query
        await query.answer()

        field = query.data.replace('edit_shift_', '')
        context.user_data['editing_field'] = field

        field_prompts = {
            'date': '–î–∞—Ç–∞ —Å–º–µ–Ω—ã (–î–î.–ú–ú.–ì–ì–ì–ì):',
            'start_time': '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (–ß–ß:–ú–ú):',
            'end_time': '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã(–ß–ß:–ú–ú):',
            'barista_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–∏—Å—Ç–∞ –≤ —Å–º–µ–Ω—É:',
            'cafe_id': 'ID –∫–∞—Ñ–µ:',
        }

        await query.edit_message_text(field_prompts[field], reply_markup=None)
        return EDIT_SHIFT_FIELDS

    async def process_shift_field_input(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è."""
        field = context.user_data.get('editing_field')
        if not field:
            await update.message.reply_text(
                '–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'
            )
            return await show_start_menu(update, context)

        value = update.message.text

        try:
            if field == 'date':
                value = datetime.strptime(value, '%d.%m.%Y').date()
                if value < datetime.now().date():
                    await update.message.reply_text(
                        '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–µ–∫—É—â–µ–π –∏–ª–∏ –ø–æ–∑–∂–µ.'
                    )
                    return EDIT_SHIFT_FIELDS
            elif field in ['start_time', 'end_time']:
                hours, minutes = map(int, value.split(':'))
                value = time(hours, minutes)
            elif field == 'barista_count':
                if not value.isdigit():
                    await update.message.reply_text(
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–∏—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.'
                    )
                    return EDIT_SHIFT_FIELDS
                value = int(value)
            elif field == 'cafe_id':
                value = int(value)
        except Exception as e:
            logger.error('Error processing field %s: %s', field, e)
            await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.')
            return EDIT_SHIFT_FIELDS

        await self.initialize_shift_data(context)
        context.user_data['new_shift'][field] = value

        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=update.message.message_id,
        )

        return await self.edit_shift_fields(update, context)

    async def save_shift(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ—Ç –≤ –ë–î."""
        query = update.callback_query
        await query.answer()

        await self.initialize_shift_data(context)
        shift_data = context.user_data['new_shift']

        required_fields = [
            'date',
            'start_time',
            'end_time',
            'barista_count',
            'cafe_id',
        ]
        missing_fields = [
            field for field in required_fields if not shift_data.get(field)
        ]

        if missing_fields:
            await query.edit_message_text(
                f'–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è: {", ".join(missing_fields)}!',
                reply_markup=None,
            )
            return await show_start_menu(update, context)

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã
            start_dt = datetime.combine(
                shift_data['date'], shift_data['start_time']
            )
            end_dt = datetime.combine(
                shift_data['date'], shift_data['end_time']
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ (–∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞)
            if end_dt <= start_dt:
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            '‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é',
                            callback_data='continue_creating_shifts',
                        )
                    ]
                ])
                await query.edit_message_text(
                    '‚ùå –û—à–∏–±–∫–∞:–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞!',
                    reply_markup=keyboard,
                )
                return EDIT_SHIFT_FIELDS

            async with async_session_maker() as session:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ñ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
                cafe = await cafe_crud.get_or_404(
                    shift_data['cafe_id'], session
                )
                if not cafe:
                    await query.edit_message_text(
                        '‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', reply_markup=None
                    )
                    return ConversationHandler.END

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∫–∞—Ñ–µ
                if (
                    shift_data['start_time'] < cafe.open_time
                    or shift_data['end_time'] > cafe.close_time
                ):
                    keyboard = InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton(
                                '‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–º–µ–Ω—ã',
                                callback_data='continue_creating_shifts',
                            )
                        ]
                    ])
                    await query.edit_message_text(
                        f'‚ùå –û—à–∏–±–∫–∞: —Å–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—Ç—ã –∫–∞—Ñ–µ!\n'
                        f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n'
                        f'–ö–∞—Ñ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å {cafe.open_time.strftime("%H:%M")}'
                        f'–¥–æ {cafe.close_time.strftime("%H:%M")}',
                        reply_markup=keyboard,
                    )
                    return EDIT_SHIFT_FIELDS

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–º–µ–Ω–∞–º–∏
                existing_shifts = await shift_crud.get_multi(
                    cafe_id=shift_data['cafe_id'], session=session
                )

                for shift in existing_shifts:
                    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –¥–∞—Ç—ã –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                    # (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã)
                    existing_start = shift.start_time.replace(tzinfo=None)
                    existing_end = shift.end_time.replace(tzinfo=None)
                    if start_dt < existing_end and end_dt > existing_start:
                        keyboard = InlineKeyboardMarkup([
                            [
                                InlineKeyboardButton(
                                    '‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–º–µ–Ω—ã',
                                    callback_data='continue_creating_shifts',
                                )
                            ]
                        ])
                        await query.edit_message_text(
                            f'‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ–Ω–æ–π!\n'
                            f'–ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∞—è —Å–º–µ–Ω–∞: '
                            f'{shift.start_time.strftime("%d.%m.%Y %H:%M")}-'
                            f'{shift.end_time.strftime("%H:%M")}',
                            reply_markup=keyboard,
                        )
                        return EDIT_SHIFT_FIELDS

                shift_create = ShiftCreate(
                    start_time=start_dt,
                    end_time=end_dt,
                    barista_count=shift_data['barista_count'],
                    cafe_id=shift_data['cafe_id'],
                )
                # async with async_session_maker() as session:
                shift = await shift_crud.create(
                    obj_in=shift_create, session=session
                )

                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω
                shifts = await shift_crud.get_multi(
                    session=session, cafe_id=shift_data['cafe_id']
                )
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ —Å–ø–∏—Å–∫–æ–º —Å–º–µ–Ω
                shifts_list = '\n'.join(
                    f'‚Ä¢ {s.start_time.strftime("%d.%m.%Y %H:%M")}-'
                    f'{s.end_time.strftime("%H:%M")} '
                    f'({s.barista_count} –±–∞—Ä–∏—Å—Ç–∞)'
                    for s in sorted(shifts, key=lambda x: x.start_time)
                )

                message = (
                    f'‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n'
                    f'üìÖ –¢–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã –∫–∞—Ñ–µ:\n{shifts_list}\n\n'
                    f'–°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Å–º–µ–Ω—É?'
                )

                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            '–î–∞', callback_data='continue_creating_shifts'
                        ),
                        InlineKeyboardButton(
                            '–ù–µ—Ç', callback_data='finish_creating_shifts'
                        ),
                    ]
                ])
                await query.edit_message_text(message, reply_markup=keyboard)
                context.user_data['current_cafe_id'] = shift_data['cafe_id']
            return CONFIRM_SHIFT_DATA
        except Exception as e:
            logger.error('Error creating shift: %s', e)
            await query.edit_message_text(
                '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞', reply_markup=None
            )
        return await show_start_menu(update, context)

    async def cancel_shift_creation(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–∞."""
        query = update.callback_query
        await query.answer()

        await query.edit_message_text(
            '–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=None
        )

        if 'new_shift' in context.user_data:
            del context.user_data['new_shift']

        return await show_start_menu(update, context)

    async def handle_continue_choice(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω."""
        query = update.callback_query
        await query.answer()

        choice = query.data

        if choice == 'continue_creating_shifts':
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–º–µ–Ω—É —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ñ–µ
            cafe_id = context.user_data.get('current_cafe_id')
            if cafe_id:
                # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –∫—Ä–æ–º–µ cafe_id
                context.user_data['new_shift'] = {
                    'date': datetime.now().date(),
                    'start_time': None,
                    'end_time': None,
                    'barista_count': None,
                    'cafe_id': cafe_id,
                }

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=query.message.message_id,
                )

                return await self.edit_shift_fields(update, context)

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ù–µ—Ç" –∏–ª–∏ cafe_id –Ω–µ –Ω–∞–π–¥–µ–Ω
        await query.edit_message_text(
            '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω', reply_markup=None
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

        return await show_start_menu(update, context)

    async def handle_back_to_editing(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–º–µ–Ω—ã."""
        query = update.callback_query
        await query.answer()
        return await self.edit_shift_fields(update, context)

    def get_conversation_handler(self) -> ConversationHandler:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞."""
        return ConversationHandler(
            entry_points=[
                CommandHandler('create_shift', self.create_shift_start),
                CallbackQueryHandler(
                    self.create_shift_start, pattern='^create_shift$'
                ),
            ],
            states={
                CONFIRM_SHIFT_DATA: [
                    CallbackQueryHandler(
                        self.proceed_to_create_shift,
                        pattern='^proceed_to_create_shift$',
                    ),
                    CallbackQueryHandler(
                        self.handle_continue_choice,
                        pattern=(
                            '^(continue_creating_shifts|'
                            'finish_creating_shifts)$'
                        ),
                    ),
                    CallbackQueryHandler(
                        self.cancel_shift_creation,
                        pattern='^cancel_shift_creation$',
                    ),
                ],
                EDIT_SHIFT_FIELDS: [
                    CallbackQueryHandler(
                        self.edit_shift_field, pattern='^edit_shift_'
                    ),
                    CallbackQueryHandler(
                        self.save_shift, pattern='^save_shift$'
                    ),
                    CallbackQueryHandler(
                        self.cancel_shift_creation,
                        pattern='^cancel_shift_creation$',
                    ),
                    CallbackQueryHandler(
                        self.handle_back_to_editing,
                        pattern='^continue_creating_shifts$',
                    ),
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.process_shift_field_input,
                    ),
                ],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
            per_message=False,
        )

    def setup_handlers(self, application: Application) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
        application.add_handler(self.get_conversation_handler())
