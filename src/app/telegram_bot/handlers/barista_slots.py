"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ—Ç–∞–º–∏ (—Å–º–µ–Ω–∞–º–∏) –±–∞—Ä–∏—Å—Ç—ã."""

import logging
from datetime import datetime, timedelta
from typing import List, Optional, Tuple

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
)

from app.core.constants import MIN_HOURS_BETWEEN_SHIFTS
from app.core.db import async_session_maker
from app.crud.cafe_crud import cafe_crud
from app.crud.reservation_crud import reservation_crud
from app.crud.user_crud import crud_user
from app.models.cafe import Cafe
from app.models.reservation import Reservation, Status
from app.models.shift import Shift
from app.telegram_bot.commands import cancel, show_start_menu

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ—Ç–∞–º–∏
SELECT_SHIFT, CONFIRM_SHIFT = range(2)


class BaristaSlotsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –±–∞—Ä–∏—Å—Ç—ã."""

    async def show_available_slots(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            if update.message:
                msg_target = update.message
            elif update.callback_query:
                await update.callback_query.answer()
                msg_target = update.callback_query.message
            else:
                logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update")
                return await show_start_menu(update, context)

            user_id = update.effective_user.id
            async with async_session_maker() as session:
                user = await crud_user.get_by_telegram_id(user_id, session)
                if not user or not user.cafe_id:
                    await msg_target.reply_text(
                        "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–∞—Ñ–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return await show_start_menu(update, context)

                cafe = await cafe_crud.get(user.cafe_id, session)
                if not cafe:
                    await msg_target.reply_text(
                        "–í–∞—à–µ –∫–∞—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return await show_start_menu(update, context)

                shifts = await self._get_available_shifts(
                    user_id, cafe.city, session)

                if not shifts:
                    await msg_target.reply_text(
                        "–ù–∞ —Ç–µ–∫—É—â—É—é –∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç "
                        "–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return await show_start_menu(update, context)

                shifts_by_date = self._group_shifts_by_date(shifts)
                message_text = "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
                buttons = []

                for date, date_shifts in shifts_by_date.items():
                    message_text += f"<b>{date.strftime('%d.%m.%Y')}</b>:\n"
                    for shift in date_shifts:
                        cafe_name = shift.cafe.name if shift.cafe else "–∫–∞—Ñ–µ"
                        message_text += (
                            f"üïí {shift.start_time.strftime('%H:%M')}-"
                            f"{shift.end_time.strftime('%H:%M')} "
                            f"üìç {cafe_name}\n"
                            f"   üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: "
                            f"{shift.barista_count - len(shift.reservations)}"
                        )
                        button_text = (
                            f"{date.strftime('%d.%m')} "
                            f"{shift.start_time.strftime('%H:%M')}-"
                            f"{shift.end_time.strftime('%H:%M')} "
                            f"{cafe_name}"
                        )
                        buttons.append([
                            InlineKeyboardButton(
                                button_text,
                                callback_data=f"select_shift_{shift.id}",
                            )
                        ])

                keyboard = InlineKeyboardMarkup(buttons)
                await msg_target.reply_text(
                    message_text,
                    reply_markup=keyboard,
                    parse_mode="HTML",
                )

            return SELECT_SHIFT
        except Exception as e:
            logger.error(f"Error in show_available_slots: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return await show_start_menu(update, context)

    async def _get_available_shifts(
        self, user_id: int, city: str, session: AsyncSession
    ) -> List[Shift]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω –¥–ª—è –±–∞—Ä–∏—Å—Ç—ã."""
        try:
            now = datetime.now()
            next_week = now + timedelta(days=14)

            stmt = (
                select(Shift)
                .join(Shift.cafe)
                .where(Cafe.city == city)
                .where(Shift.start_time >= now)
                .where(Shift.start_time <= next_week)
                .options(
                    selectinload(Shift.reservations),
                    selectinload(Shift.cafe)
                )
                .order_by(Shift.start_time)
            )

            shifts = (await session.execute(stmt)).scalars().all()

            user = await crud_user.get_by_telegram_id(user_id, session)
            if not user:
                return []

            reservations_stmt = (
                select(Reservation)
                .where(Reservation.barista_id == user.id)
                .where(Reservation.status.in_(
                    [Status.RESERVED, Status.ATTENDED])
                ))
            reservations = (await session.execute(
                reservations_stmt)).scalars().all()
            booked_shift_ids = {r.shift_id for r in reservations}

            available_shifts = []
            for shift in shifts:
                if shift.id in booked_shift_ids:
                    continue

                reserved_count = sum(
                    1 for r in shift.reservations
                    if r.status in [Status.RESERVED, Status.ATTENDED]
                )
                if reserved_count < shift.barista_count:
                    available_shifts.append(shift)

            return available_shifts
        except Exception as e:
            logger.error(f"Error in _get_available_shifts: {e}")
            raise

    def _group_shifts_by_date(self, shifts: List[Shift]) -> dict:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–º–µ–Ω—ã –ø–æ –¥–∞—Ç–∞–º."""
        shifts_by_date = {}
        for shift in shifts:
            date = shift.start_time.date()
            if date not in shifts_by_date:
                shifts_by_date[date] = []
            shifts_by_date[date].append(shift)
        return shifts_by_date

    async def _check_time_conflicts(
        self, user_id: int, shift: Shift, session: AsyncSession
    ) -> Optional[Tuple[Shift, str, str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ —Å–º–µ–Ω–∞–º–∏ –±–∞—Ä–∏—Å—Ç—ã."""
        try:
            user = await crud_user.get_by_telegram_id(user_id, session)
            if not user:
                return None

            reservations = await reservation_crud.get_by_user(
                barista_id=user.id,
                session=session,
            )

            for reservation in reservations:
                if reservation.status == Status.CANCELLED:
                    continue

                await session.refresh(reservation, ['shift'])
                other_shift = reservation.shift

                shift_start = shift.start_time
                shift_end = shift.end_time
                other_start = other_shift.start_time
                other_end = other_shift.end_time

                logger.debug(
                    f"Checking shift {shift.id} ({shift_start}-{shift_end})"
                )
                logger.debug(
                    f"Against shift {other_shift.id} "
                    f"({other_start}-{other_end})"
                )

                if (shift_start < other_end) and (shift_end > other_start):
                    logger.debug("Found time overlap conflict")
                    return (other_shift, "overlap", "–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∞—è—Å—è")

                time_between_shifts = min(
                    abs((shift_start - other_end).total_seconds()),
                    abs((other_start - shift_end).total_seconds())
                )
                logger.debug(
                    f"Time between shifts: {time_between_shifts/3600} hours"
                )

                if time_between_shifts < MIN_HOURS_BETWEEN_SHIFTS * 3600:
                    if shift_start > other_end:
                        logger.debug("Found minimum time conflict (before)")
                        return (other_shift, "before", "–ø—Ä–µ–¥—ã–¥—É—â–∞—è")
                    logger.debug("Found minimum time conflict (after)")
                    return (other_shift, "after", "—Å–ª–µ–¥—É—é—â–∞—è")

            return None
        except Exception as e:
            logger.error(f"Error in _check_time_conflicts: {e}")
            raise

    async def select_shift(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–º–µ–Ω—ã."""
        try:
            query = update.callback_query
            await query.answer()

            shift_id = int(query.data.replace("select_shift_", ""))
            context.user_data["selected_shift_id"] = shift_id

            async with async_session_maker() as session:
                stmt = (
                    select(Shift)
                    .where(Shift.id == shift_id)
                    .options(
                        selectinload(Shift.cafe),
                        selectinload(Shift.reservations).selectinload(
                            Reservation.shift)
                    )
                )
                result = await session.execute(stmt)
                shift = result.scalar_one_or_none()

                if not shift:
                    await query.edit_message_text("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return await show_start_menu(update, context)

                user_id = update.effective_user.id
                time_conflic = await self._check_time_conflicts(
                    user_id, shift, session
                )

                if time_conflic:
                    conflict_shift, conflict_type, conflict_name = time_conflic
                    conflict_cafe_stmt = select(Cafe).where(
                        Cafe.id == conflict_shift.cafe_id)
                    conflict_cafe = (
                        await session.execute(conflict_cafe_stmt)
                    ).scalar_one_or_none()
                    cafe_name = (
                        conflict_cafe.name if conflict_cafe
                        else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–∞—Ñ–µ"
                    )

                    if conflict_type == "overlap":
                        message = (
                            "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É:\n"
                            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∞—è—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω–∞:\n"
                            f"üìÖ {conflict_shift.start_time.strftime(
                                '%d.%m.%Y %H:%M')}-"
                            f"{conflict_shift.end_time.strftime('%H:%M')}\n"
                            f"üìç {cafe_name}\n\n"
                            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–≤—É—Ö –∫–∞—Ñ–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!"
                        )
                    else:
                        message = (
                            "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É:\n"
                            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {conflict_name} —Å–º–µ–Ω–∞:\n"
                            f"üìÖ {conflict_shift.start_time.strftime(
                                '%d.%m.%Y %H:%M')}-"
                            f"{conflict_shift.end_time.strftime('%H:%M')}\n"
                            f"üìç {cafe_name}\n\n"
                            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏: "
                            f"{MIN_HOURS_BETWEEN_SHIFTS} —á–∞—Å–æ–≤."
                        )
                    await query.edit_message_text(message)
                    return await show_start_menu(update, context)

                reserved_count = sum(
                    1 for r in shift.reservations
                    if r.status in [Status.RESERVED, Status.ATTENDED]
                )
                free_slots = shift.barista_count - reserved_count

                cafe_name = shift.cafe.name if shift.cafe else "–∫–∞—Ñ–µ"
                message = (
                    "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–º–µ–Ω–µ:\n\n"
                    f"üìÖ –î–∞—Ç–∞: {shift.start_time.strftime('%d.%m.%Y')}\n"
                    f"üïí –í—Ä–µ–º—è: {shift.start_time.strftime('%H:%M')}-"
                    f"{shift.end_time.strftime('%H:%M')}\n"
                    f"üìç –ö–∞—Ñ–µ: {cafe_name}\n"
                    f"üèôÔ∏è –ì–æ—Ä–æ–¥: {shift.cafe.city}\n"
                    f"üìå –ê–¥—Ä–µ—Å: {shift.cafe.address}\n"
                    f"üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {free_slots}/{shift.barista_count}\n"
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:"
                )

                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_shift"),
                        InlineKeyboardButton(
                            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"),
                    ]
                ])

                await query.edit_message_text(
                    message,
                    reply_markup=keyboard,
                    parse_mode="HTML",
                )

            return CONFIRM_SHIFT
        except Exception as e:
            logger.error(f"Error in select_shift: {e}")
            await update.callback_query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return await show_start_menu(update, context)

    async def confirm_shift_reservation(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã."""
        try:
            query = update.callback_query
            await query.answer()

            shift_id = context.user_data.get("selected_shift_id")
            if not shift_id:
                await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–º–µ–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
                return await show_start_menu(update, context)

            user_id = update.effective_user.id
            async with async_session_maker() as session:
                user = await crud_user.get_by_telegram_id(user_id, session)
                if not user:
                    await query.edit_message_text(
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return await show_start_menu(update, context)

                stmt = (
                    select(Shift)
                    .where(Shift.id == shift_id)
                    .options(
                        selectinload(Shift.reservations),
                        selectinload(Shift.cafe)
                    )
                )
                shift = (await session.execute(stmt)).scalar_one_or_none()

                if not shift:
                    await query.edit_message_text("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return await show_start_menu(update, context)

                reserved_count = sum(
                    1 for r in shift.reservations
                    if r.status in [Status.RESERVED, Status.ATTENDED]
                )
                if reserved_count >= shift.barista_count:
                    await query.edit_message_text(
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ –Ω–∞ —ç—Ç—É —Å–º–µ–Ω—É —É–∂–µ –∑–∞–Ω—è—Ç—ã."
                    )
                    return await show_start_menu(update, context)

                time_conflict = await self._check_time_conflicts(
                    user_id, shift, session
                )
                if time_conflict:
                    await query.edit_message_text(
                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å –¥—Ä—É–≥–æ–π —Å–º–µ–Ω–æ–π. "
                        "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
                    )
                    return await show_start_menu(update, context)

                # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                await reservation_crud.create_with_status(
                    barista_id=user.id,
                    shift_id=shift_id,
                    status=Status.RESERVED,
                    session=session,
                )
                await session.commit()

                cafe_name = shift.cafe.name if shift.cafe else "–∫–∞—Ñ–µ"
                message = (
                    "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Å–º–µ–Ω—É:\n\n"
                    f"üìÖ –î–∞—Ç–∞: {shift.start_time.strftime('%d.%m.%Y')}\n"
                    f"üïí –í—Ä–µ–º—è: {shift.start_time.strftime('%H:%M')}-"
                    f"{shift.end_time.strftime('%H:%M')}\n"
                    f"üìç –ö–∞—Ñ–µ: {cafe_name}\n"
                    f"üèôÔ∏è –ì–æ—Ä–æ–¥: {shift.cafe.city}\n"
                    f"üìå –ê–¥—Ä–µ—Å: {shift.cafe.address}\n\n"
                )

                # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                await query.edit_message_text(
                    message,
                    parse_mode="HTML",
                    reply_markup=None
                )

            context.user_data.clear()
            return await show_start_menu(update, context)
        except Exception as e:
            logger.error(f"Error in confirm_shift_reservation: {e}")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
            return await show_start_menu(update, context)

    def get_conversation_handler(self) -> ConversationHandler:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ—Ç–∞–º–∏."""
        return ConversationHandler(
            entry_points=[
                CommandHandler("slots", self.show_available_slots),
                CallbackQueryHandler(
                    self.show_available_slots,
                    pattern='^barista_slots$'
                ),
            ],
            states={
                SELECT_SHIFT: [
                    CallbackQueryHandler(
                        self.select_shift, pattern="^select_shift_"
                    ),
                    CallbackQueryHandler(
                        cancel,
                        pattern="^cancel$",
                    ),
                ],
                CONFIRM_SHIFT: [
                    CallbackQueryHandler(
                        self.confirm_shift_reservation,
                        pattern="^confirm_shift$",
                    ),
                    CallbackQueryHandler(
                        cancel,
                        pattern="^cancel$",
                    ),
                ],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )

    def setup_handlers(self, application: Application) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
        application.add_handler(self.get_conversation_handler())
