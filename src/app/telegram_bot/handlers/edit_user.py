import logging
from enum import IntEnum

from pydantic import ValidationError as PydanticValidationError
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from app.core.db import async_session_maker
from app.crud.user_crud import crud_user
from app.models.user import User
from app.schemas.user_schema import UserRead, UserUpdate
from app.telegram_bot.commands import show_start_menu
from app.telegram_bot.handlers.base import BaseHandler

logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
class EditUserStates(IntEnum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    AWAITING_QUERY = 0
    SELECTING = 1
    EDITING_FIELD = 2


# üìå –ü—Ä–µ—Ñ–∏–∫—Å—ã
CB_SELECT_PREFIX = 'select_user_'
CB_EDIT_PREFIX = 'edit_'
CB_SAVE = 'save_changes'
CB_CANCEL = 'cancel_edit'

SELECT_PATTERN = rf'^{CB_SELECT_PREFIX}\d+$'
EDIT_PATTERN = rf'^{CB_EDIT_PREFIX}\w+$'
SAVE_PATTERN = rf'^{CB_SAVE}$'
CANCEL_PATTERN = rf'^{CB_CANCEL}$'

# üßæ –°–æ–æ–±—â–µ–Ω–∏—è
MSG_ENTER_QUERY = (
    'üîé <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n'
    '–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π:\n'
    '‚Ä¢ <b>–ò–º—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>–ò–≤–∞–Ω</code>)\n'
    '‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>+79991234567</code>)\n'
    '‚Ä¢ <b>Telegram ID</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>123456789</code>)\n\n'
    '–ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞.'
)
MSG_NO_RESULTS = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.'
MSG_SELECT_USER = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:'
MSG_UPDATED_FIELD = (
    '–ü–æ–ª–µ "{field}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ. '
    '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å".'
)
MSG_FIELD_INPUT = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: ¬´{field}¬ª'
MSG_CHOOSE_STATUS = 'üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:'
MSG_CHOOSE_ROLE = 'üîê –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:'
MSG_UPDATED = '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.'
MSG_CANCELLED = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.'
MSG_ERROR = '‚ùó {error}'
MSG_ALREADY_SAVING = '–£–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è‚Ä¶'
MSG_EDIT_PROMPT = (
    '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n'
    '–ò–º—è: {name}\n'
    '–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n'
    '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ:'
)

CB_STATUS_PREFIX = 'status_'
STATUS_ACTIVE = 'active'
STATUS_INACTIVE = 'inactive'
STATUS_PATTERN = rf'^{CB_STATUS_PREFIX}({STATUS_ACTIVE}|{STATUS_INACTIVE})$'

LABEL_STATUS_ACTIVE   = '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π'
LABEL_STATUS_INACTIVE = '‚õî –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'
LABEL_BACK            = 'üîô –ù–∞–∑–∞–¥'

CB_ROLE_PREFIX = 'role_'
ROLE_BARISTA   = 'barista'
ROLE_MANAGER   = 'manager'
ROLE_ADMIN     = 'admin'
ROLE_PATTERN = (
    rf'^{CB_ROLE_PREFIX}({ROLE_BARISTA}|'
    rf'{ROLE_MANAGER}|{ROLE_ADMIN})$'
)

LABEL_ROLE_BARISTA = 'üë§ –ë–∞—Ä–∏—Å—Ç–∞'
LABEL_ROLE_MANAGER = 'üßë‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä'
LABEL_ROLE_ADMIN   = 'üõ°Ô∏è –ê–¥–º–∏–Ω'


def human_status(v: bool | None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Active –ø—Ä–∏ True, Inactive –ø—Ä–∏ False ."""
    return LABEL_STATUS_ACTIVE if v else LABEL_STATUS_INACTIVE


def human_role(v: object) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç —Ä–æ–ª–∏ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."""
    raw = getattr(v, 'value', getattr(v, 'name', str(v))).lower()
    mapping = {
        'barista': '–ë–∞—Ä–∏—Å—Ç–∞',
        'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        'admin': '–ê–¥–º–∏–Ω'}
    return mapping.get(raw, raw)


def build_role_keyboard(current: object | None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏: –ë–∞—Ä–∏—Å—Ç–∞ / –ú–µ–Ω–µ–¥–∂–µ—Ä / –ê–¥–º–∏–Ω + –ù–∞–∑–∞–¥/–û—Ç–º–µ–Ω–∞."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(
            LABEL_ROLE_BARISTA,
            callback_data=f'{CB_ROLE_PREFIX}{ROLE_BARISTA}')],
        [InlineKeyboardButton(
            LABEL_ROLE_MANAGER,
            callback_data=f'{CB_ROLE_PREFIX}{ROLE_MANAGER}')],
        [InlineKeyboardButton(
            LABEL_ROLE_ADMIN,
            callback_data=f'{CB_ROLE_PREFIX}{ROLE_ADMIN}')],
        [InlineKeyboardButton(
            LABEL_BACK,
            callback_data=CB_CANCEL)],
    ])


def build_status_keyboard(current: bool | None
                          ) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞: –ê–∫—Ç–∏–≤–Ω—ã–π / –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π + –æ—Ç–º–µ–Ω–∞."""
    buttons = [
        [
            InlineKeyboardButton(
                LABEL_STATUS_ACTIVE,
                callback_data=f'{CB_STATUS_PREFIX}{STATUS_ACTIVE}'),
            InlineKeyboardButton(
                LABEL_STATUS_INACTIVE,
                callback_data=f'{CB_STATUS_PREFIX}{STATUS_INACTIVE}'),
        ],
        [InlineKeyboardButton(
            LABEL_BACK,
            callback_data=CB_CANCEL)],
    ]
    return InlineKeyboardMarkup(buttons)


def build_keyboard(user: UserRead) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    buttons = [
        [InlineKeyboardButton(
            f'‚úèÔ∏è –ò–º—è: {user.name}',
            callback_data=f'{CB_EDIT_PREFIX}–ò–º—è')],
        [InlineKeyboardButton(
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}',
            callback_data=f'{CB_EDIT_PREFIX}–¢–µ–ª–µ—Ñ–æ–Ω')],
        [InlineKeyboardButton(
            f'üÜî Telegram ID: {user.telegram_id}',
            callback_data=f'{CB_EDIT_PREFIX}Telegram ID')],
        [InlineKeyboardButton(
            f'üîê –†–æ–ª—å: {human_role(user.role)}',
            callback_data=f'{CB_EDIT_PREFIX}–†–æ–ª—å')],
        [InlineKeyboardButton(
            f'üè™ –ö–∞—Ñ–µ ID: {user.cafe_id}',
            callback_data=f'{CB_EDIT_PREFIX}–ö–∞—Ñ–µ ID')],
        [InlineKeyboardButton(
            f'üîÑ –°—Ç–∞—Ç—É—Å: {human_status(user.is_active)}',
            callback_data=f'{CB_EDIT_PREFIX}–°—Ç–∞—Ç—É—Å'
        )],
        [InlineKeyboardButton(
            '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
            callback_data=CB_SAVE)],
        [InlineKeyboardButton(
            '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
            callback_data=CB_CANCEL)],
    ]
    return InlineKeyboardMarkup(buttons)


class EditUserHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_user ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EditUserHandler."""
        self.user_crud = crud_user

    async def start_edit_user(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ ‚Äî –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞."""
        context.user_data.clear()
        await self.send_text_safely(
            update,
            MSG_ENTER_QUERY,
            parse_mode='HTML'
        )
        return EditUserStates.AWAITING_QUERY

    async def process_query(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∞ (–ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é)."""
        query = update.message.text.strip()
        async with async_session_maker() as session:
            users = await self.user_crud.search_by_query(query, session)

        if not users:
            await self.send_text_safely(update, MSG_NO_RESULTS)
            return EditUserStates.AWAITING_QUERY

        if len(users) == 1:
            return await self._select_user(update, context, users[0])

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton(
                f'{u.name} ({u.phone})',
                callback_data=f'{CB_SELECT_PREFIX}{u.id}')
        ] for u in users])

        await self.send_text_safely(
            update,
            MSG_SELECT_USER,
            reply_markup=keyboard)
        return EditUserStates.SELECTING

    async def handle_user_selection(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É)."""
        query = update.callback_query
        await query.answer()

        user_id = int(query.data.replace(CB_SELECT_PREFIX, ''))
        async with async_session_maker() as session:
            user = await self.user_crud.get_or_404(user_id, session)
        return await self._select_user(update, context, user)

    async def _select_user(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE,
            user: User
    ) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_data = UserRead.model_validate(user)
        context.user_data['edit_user'] = user_data.model_dump()
        context.user_data['user_id'] = user.id
        await self.send_text_safely(
            update,
            MSG_EDIT_PROMPT.format(name=user.name, phone=user.phone),
            reply_markup=build_keyboard(user_data)
        )
        return EditUserStates.EDITING_FIELD

    async def choose_field(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç, –∫–∞–∫–æ–µ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ."""
        query = update.callback_query
        await query.answer()
        field = query.data.replace(CB_EDIT_PREFIX, '')
        context.user_data['editing_field'] = field

        if field == '–°—Ç–∞—Ç—É—Å':
            current = context.user_data.get('edit_user', {}).get('is_active')
            await query.edit_message_text(
                MSG_CHOOSE_STATUS,
                reply_markup=build_status_keyboard(current)
            )
            return EditUserStates.EDITING_FIELD

        if field == '–†–æ–ª—å':
            current_role = context.user_data.get('edit_user', {}).get('role')
            await query.edit_message_text(
                MSG_CHOOSE_ROLE,
                reply_markup=build_role_keyboard(current_role)
            )
            return EditUserStates.EDITING_FIELD

        await query.edit_message_text(MSG_FIELD_INPUT.format(field=field))
        return EditUserStates.EDITING_FIELD

    async def handle_new_value(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç."""
        field = context.user_data.get('editing_field')
        raw_value = update.message.text.strip()
        context.user_data['edit_user'][field] = raw_value
        try:
            UserUpdate(**context.user_data['edit_user'])
        except PydanticValidationError as e:
            await self.send_text_safely(
                update,
                MSG_ERROR.format(error=e.errors()[0]['msg']))
            return EditUserStates.EDITING_FIELD

        updated_user = UserRead(**context.user_data['edit_user'])
        await self.send_text_safely(
            update,
            MSG_UPDATED_FIELD.format(field=field),
            reply_markup=build_keyboard(updated_user)
        )
        return EditUserStates.EDITING_FIELD

    async def handle_status_choice(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ê–∫—Ç–∏–≤–Ω—ã–π/–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç."""
        query = update.callback_query
        await query.answer()

        choice = query.data.replace(CB_STATUS_PREFIX, '')
        is_active = (choice == STATUS_ACTIVE)
        context.user_data['edit_user']['is_active'] = is_active

        try:
            UserUpdate(**context.user_data['edit_user'])
        except PydanticValidationError as e:
            await query.edit_message_text(MSG_ERROR.format(
                error=e.errors()[0]['msg']))
            return EditUserStates.EDITING_FIELD

        updated_user = UserRead(**context.user_data['edit_user'])
        await query.edit_message_text(
            MSG_UPDATED_FIELD.format(field='–°—Ç–∞—Ç—É—Å'),
            reply_markup=build_keyboard(updated_user)
        )
        return EditUserStates.EDITING_FIELD

    async def handle_role_choice(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç."""
        query = update.callback_query
        await query.answer()
        role_choice = query.data.replace(CB_ROLE_PREFIX, '')
        context.user_data['edit_user']['role'] = role_choice
        try:
            UserUpdate(**context.user_data['edit_user'])
        except PydanticValidationError as e:
            await query.edit_message_text(
                MSG_ERROR.format(error=e.errors()[0]['msg']))
            return EditUserStates.EDITING_FIELD

        updated_user = UserRead(**context.user_data['edit_user'])
        await query.edit_message_text(
            MSG_UPDATED_FIELD.format(field='–†–æ–ª—å'),
            reply_markup=build_keyboard(updated_user)
        )
        return EditUserStates.EDITING_FIELD

    async def confirm_save(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        query = update.callback_query
        if context.user_data.get('saving'):
            await query.answer(MSG_ALREADY_SAVING)
            return await show_start_menu(update, context)

        context.user_data['saving'] = True
        await query.answer()

        user_id = context.user_data['user_id']
        update_data = UserUpdate(**context.user_data['edit_user'])

        async with async_session_maker() as session:
            db_user = await self.user_crud.get_or_404(user_id, session)
            await self.user_crud.update(
                db_obj=db_user,
                obj_in=update_data,
                session=session
            )
        # await self.send_text_safely(update, MSG_UPDATED)
        await query.edit_message_text(MSG_UPDATED)
        return await show_start_menu(update, context)

    async def cancel(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π inline-–∫–Ω–æ–ø–æ–∫ –∏ –∫—Ä–∞—Å–∏–≤—ã–º –≤—ã–≤–æ–¥–æ–º."""
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(MSG_CANCELLED)
        else:
            await self.send_text_safely(update, MSG_CANCELLED)
        return await show_start_menu(update, context)

    def get_handler(self) -> ConversationHandler:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return ConversationHandler(
            entry_points=[
                CommandHandler(
                    'edit_user', self.start_edit_user),
                CallbackQueryHandler(
                    self.start_edit_user,
                    pattern='^edit_user$')
            ],
            states={
                EditUserStates.AWAITING_QUERY: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND,
                                   self.process_query)],
                EditUserStates.SELECTING: [
                    CallbackQueryHandler(self.handle_user_selection,
                                         pattern=SELECT_PATTERN)],
                EditUserStates.EDITING_FIELD: [
                    CallbackQueryHandler(self.handle_status_choice,
                                         pattern=STATUS_PATTERN),
                    CallbackQueryHandler(self.handle_role_choice,
                                         pattern=ROLE_PATTERN),
                    CallbackQueryHandler(self.choose_field,
                                         pattern=EDIT_PATTERN),
                    CallbackQueryHandler(self.confirm_save,
                                         pattern=SAVE_PATTERN),
                    CallbackQueryHandler(self.cancel,
                                         pattern=CANCEL_PATTERN),
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.handle_new_value),
                ],
            },
            fallbacks=[
                CommandHandler(
                    'cancel',
                    self.cancel)],
            per_message=False,
        )

    def setup(self, app: Application) -> None:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é Telegram-–±–æ—Ç–∞."""
        app.add_handler(self.get_handler())
