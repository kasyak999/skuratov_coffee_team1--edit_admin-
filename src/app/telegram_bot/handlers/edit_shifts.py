"""–ú–æ–¥—É–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""

import logging
from datetime import datetime, time

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from app.core.db import async_session_maker
from app.crud.shift_crud import shift_crud
from app.crud.user_crud import crud_user
from app.schemas.shift_schema import ShiftUpdate
from app.telegram_bot.commands import show_start_menu

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã
LIST_SHIFTS, EDIT_SHIFT_FIELD, CONFIRM_EDIT = range(3)


class EditShiftHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
        self.shift_crud = shift_crud

    async def get_user_cafe_id(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç cafe_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with async_session_maker() as session:
            user = await crud_user.get_by_telegram_id(user_id, session)
            return user.cafe_id if user and user.cafe_id else None

    async def edit_shift_start(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω."""
        query = update.callback_query
        if query:
            await query.answer()

        user_id = update.effective_user.id
        cafe_id = await self.get_user_cafe_id(user_id)

        if not cafe_id:
            await update.message.reply_text(
                '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –∫–∞—Ñ–µ.'
            )
            return await show_start_menu(update, context)

        context.user_data['cafe_id'] = cafe_id
        return await self.show_shifts_list(update, context)

    async def show_shifts_list(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        cafe_id = context.user_data['cafe_id']

        async with async_session_maker() as session:
            shifts = await shift_crud.get_multi(
                cafe_id=cafe_id, session=session
            )

        if not shifts:
            await update.message.reply_text(
                '–î–ª—è –≤–∞—à–µ–≥–æ –∫–∞—Ñ–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'
            )
            return await show_start_menu(update, context)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        shifts = sorted(shifts, key=lambda x: x.start_time, reverse=True)

        buttons = []
        for shift in shifts:
            btn_text = (
                f'{shift.start_time.strftime("%d.%m.%Y")} '
                f'{shift.start_time.strftime("%H:%M")}-'
                f'{shift.end_time.strftime("%H:%M")} '
                f'({shift.barista_count} –±–∞—Ä–∏—Å—Ç–∞)'
            )
            buttons.append([
                InlineKeyboardButton(
                    btn_text, callback_data=f'edit_shift_{shift.id}'
                )
            ])

        buttons.append([
            InlineKeyboardButton(
                '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_edit_shifts'
            )
        ])

        keyboard = InlineKeyboardMarkup(buttons)
        message = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:'

        try:
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    message, reply_markup=keyboard
                )
            else:
                await update.message.reply_text(message, reply_markup=keyboard)
        except Exception as e:
            logger.error(f'Error showing shifts list: {e}')
            return await show_start_menu(update, context)

        return LIST_SHIFTS

    async def select_shift_to_edit(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–º–µ–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        query = update.callback_query

        if query:
            await query.answer()
            shift_id = int(query.data.replace('edit_shift_', ''))
        else:
            shift_id = context.user_data['shift_id']
            if not shift_id:
                await update.message.reply_text(
                    '–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Å–º–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'
                )
                return await show_start_menu(update, context)

        context.user_data['shift_id'] = shift_id

        async with async_session_maker() as session:
            shift = await shift_crud.get(shift_id, session)
            if not shift:
                msg = '–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'
                if query:
                    await query.edit_message_text(msg)
                else:
                    await update.message.reply_text(msg)
                return await show_start_menu(update, context)

            context.user_data['current_shift'] = {
                'start_time': shift.start_time.time(),
                'end_time': shift.end_time.time(),
                'barista_count': shift.barista_count,
            }

        buttons = [
            [
                InlineKeyboardButton(
                    f'üïí –ù–∞—á–∞–ª–æ: {shift.start_time.strftime("%H:%M")}',
                    callback_data='edit_start_time',
                )
            ],
            [
                InlineKeyboardButton(
                    f'üïò –ö–æ–Ω–µ—Ü: {shift.end_time.strftime("%H:%M")}',
                    callback_data='edit_end_time',
                )
            ],
            [
                InlineKeyboardButton(
                    f'üë• –ë–∞—Ä–∏—Å—Ç–∞: {shift.barista_count}',
                    callback_data='edit_barista_count',
                )
            ],
            [
                InlineKeyboardButton(
                    '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save_shift_changes'
                ),
                InlineKeyboardButton(
                    '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='back_to_shifts_list'
                ),
            ],
        ]

        keyboard = InlineKeyboardMarkup(buttons)
        message = (
            f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç '
            f'{shift.start_time.strftime("%d.%m.%Y")}\n'
            f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:'
        )

        if query:
            await query.edit_message_text(message, reply_markup=keyboard)
        else:
            await update.message.reply_text(message, reply_markup=keyboard)

        return EDIT_SHIFT_FIELD

    async def edit_shift_field_prompt(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è."""
        query = update.callback_query
        await query.answer()

        field = query.data.replace('edit_', '')
        context.user_data['editing_field'] = field

        prompts = {
            'start_time': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ß–ß:–ú–ú):',
            'end_time': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ß–ß:–ú–ú):',
            'barista_count': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–∏—Å—Ç–∞:',
        }

        await query.edit_message_text(prompts[field], reply_markup=None)

        return EDIT_SHIFT_FIELD

    async def process_shift_field_input(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è."""
        field = context.user_data.get('editing_field')
        if not field:
            await update.message.reply_text(
                '–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'
            )
            return await show_start_menu(update, context)

        value = update.message.text

        try:
            if field in ['start_time', 'end_time']:
                hours, minutes = map(int, value.split(':'))
                value = time(hours, minutes)
            elif field == 'barista_count':
                if not value.isdigit():
                    raise ValueError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–∏—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º')
                value = int(value)
        except Exception as e:
            logger.error(f'Error processing field input: {e}')
            await update.message.reply_text(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}')
            return EDIT_SHIFT_FIELD

        context.user_data['current_shift'][field] = value
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=update.message.message_id,
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        shift_id = context.user_data['shift_id']
        async with async_session_maker() as session:
            shift = await shift_crud.get(shift_id, session)
            if not shift:
                await update.message.reply_text('–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
                return await show_start_menu(update, context)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        start_time = context.user_data['current_shift']['start_time'].strftime(
            '%H:%M'
        )
        end_time = context.user_data['current_shift']['end_time'].strftime(
            '%H:%M'
        )
        barista_count = context.user_data['current_shift']['barista_count']
        buttons = [
            [
                InlineKeyboardButton(
                    f'üïí –ù–∞—á–∞–ª–æ: {start_time}', callback_data='edit_start_time'
                )
            ],
            [
                InlineKeyboardButton(
                    f'üïò –ö–æ–Ω–µ—Ü: {end_time}', callback_data='edit_end_time'
                )
            ],
            [
                InlineKeyboardButton(
                    f'üë• –ë–∞—Ä–∏—Å—Ç–∞: {barista_count}',
                    callback_data='edit_barista_count',
                )
            ],
            [
                InlineKeyboardButton(
                    '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save_shift_changes'
                ),
                InlineKeyboardButton(
                    '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='back_to_shifts_list'
                ),
            ],
        ]

        keyboard = InlineKeyboardMarkup(buttons)
        message = (
            f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç '
            f'{shift.start_time.strftime("%d.%m.%Y")}\n'
            f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:'
        )

        await update.message.reply_text(message, reply_markup=keyboard)

        return EDIT_SHIFT_FIELD

    async def save_shift_changes(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–º–µ–Ω–µ."""
        query = update.callback_query
        if query:
            await query.answer()
        else:
            await update.message.reply_text('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã.')
            return await show_start_menu(update, context)

        shift_id = context.user_data['shift_id']
        if not shift_id:
            await query.edit_message_text(
                '–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Å–º–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'
            )
            return await show_start_menu(update, context)

        shift_data = context.user_data['current_shift']
        if not shift_data:
            await query.edit_message_text('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.')
            return await show_start_menu(update, context)

        try:
            async with async_session_maker() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã
                current_shift = await shift_crud.get(shift_id, session)
                if not current_shift:
                    await query.edit_message_text('–û—à–∏–±–∫–∞: —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
                    return await show_start_menu(update, context)

                # –§–æ—Ä–º–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å–º–µ–Ω—ã
                start_dt = datetime.combine(
                    current_shift.start_time.date(), shift_data['start_time']
                )
                end_dt = datetime.combine(
                    current_shift.end_time.date(), shift_data['end_time']
                )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–º–µ–Ω–∞–º–∏
                existing_shifts = await shift_crud.get_multi(
                    cafe_id=current_shift.cafe_id, session=session
                )

                for shift in existing_shifts:
                    if shift.id == shift_id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
                        continue
                    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –¥–∞—Ç—ã –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                    # (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã)
                    existing_start = shift.start_time.replace(tzinfo=None)
                    existing_end = shift.end_time.replace(tzinfo=None)
                    if start_dt < existing_end and end_dt > existing_start:
                        keyboard = InlineKeyboardMarkup([
                            [
                                InlineKeyboardButton(
                                    '‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–º–µ–Ω',
                                    callback_data='back_to_shifts_list',
                                )
                            ]
                        ])
                        await query.edit_message_text(
                            f'‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ–Ω–æ–π!\n'
                            f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n'
                            f'–ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∞—è —Å–º–µ–Ω–∞:\n'
                            f'{shift.start_time.strftime("%d.%m.%Y %H:%M")}-'
                            f'{shift.end_time.strftime("%H:%M")}',
                            reply_markup=keyboard,
                        )
                        return EDIT_SHIFT_FIELD

                shift_update = ShiftUpdate(
                    start_time=start_dt,
                    end_time=end_dt,
                    barista_count=shift_data['barista_count'],
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ–Ω—É
                await shift_crud.update(
                    db_obj=current_shift, obj_in=shift_update, session=session
                )

                await session.commit()

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω
                shifts = await shift_crud.get_multi(
                    cafe_id=current_shift.cafe_id, session=session
                )

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                shifts_list = '\n'.join(
                    f'‚Ä¢ {s.start_time.strftime("%d.%m.%Y %H:%M")}-'
                    f'{s.end_time.strftime("%H:%M")} '
                    f'({s.barista_count} –±–∞—Ä–∏—Å—Ç–∞)'
                    for s in sorted(shifts, key=lambda x: x.start_time)
                )
                message = (
                    f'‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n'
                    f'üìÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–º–µ–Ω—ã:\n{shifts_list}\n\n'
                    f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?'
                )
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            '–î–∞', callback_data='continue_editing'
                        ),
                        InlineKeyboardButton(
                            '–ù–µ—Ç', callback_data='finish_editing'
                        ),
                    ]
                ])

                await query.edit_message_text(message, reply_markup=keyboard)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º cafe_id –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                context.user_data['current_cafe_id'] = current_shift.cafe_id

                return CONFIRM_EDIT

        except Exception as e:
            logger.error(f'Error saving shift changes: {e}')
            await query.edit_message_text(
                f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {str(e)}.',
                reply_markup=None,
            )
            return await show_start_menu(update, context)

    async def handle_continue_editing(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        query = update.callback_query
        await query.answer()

        choice = query.data

        if choice == 'continue_editing':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–º–µ–Ω
            cafe_id = context.user_data.get('current_cafe_id')
            if cafe_id:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º cafe_id
                context.user_data.pop('shift_id', None)
                context.user_data.pop('current_shift', None)
                context.user_data.pop('editing_field', None)

                return await self.show_shifts_list(update, context)

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ù–µ—Ç" –∏–ª–∏ cafe_id –Ω–µ –Ω–∞–π–¥–µ–Ω
        await query.edit_message_text(
            '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.', reply_markup=None
        )

        # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.clear()

        return await show_start_menu(update, context)

    async def back_to_shifts_list(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —Å–º–µ–Ω –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        query = update.callback_query
        await query.answer()

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('shift_id', None)
        context.user_data.pop('current_shift', None)

        return await self.show_shifts_list(update, context)

    async def cancel_edit_shifts(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω."""
        query = update.callback_query
        await query.answer()

        # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

        await query.edit_message_text(
            '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=None
        )

        return await show_start_menu(update, context)

    def get_conversation_handler(self) -> ConversationHandler:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω."""
        return ConversationHandler(
            entry_points=[
                CommandHandler('edit_shifts', self.edit_shift_start),
                CallbackQueryHandler(
                    self.edit_shift_start, pattern='^edit_shifts$'
                ),
            ],
            states={
                LIST_SHIFTS: [
                    CallbackQueryHandler(
                        self.select_shift_to_edit, pattern='^edit_shift_'
                    ),
                    CallbackQueryHandler(
                        self.cancel_edit_shifts, pattern='^cancel_edit_shifts$'
                    ),
                ],
                EDIT_SHIFT_FIELD: [
                    CallbackQueryHandler(
                        self.edit_shift_field_prompt,
                        pattern='^edit_(start_time|end_time|barista_count)$',
                    ),
                    CallbackQueryHandler(
                        self.save_shift_changes, pattern='^save_shift_changes$'
                    ),
                    CallbackQueryHandler(
                        self.back_to_shifts_list,
                        pattern='^back_to_shifts_list$',
                    ),
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.process_shift_field_input,
                    ),
                ],
                CONFIRM_EDIT: [
                    CallbackQueryHandler(
                        self.handle_continue_editing,
                        pattern='^(continue_editing|finish_editing)$',
                    )
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel_edit_shifts)],
            per_message=False,
        )

    def setup_handlers(self, application: Application) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
        application.add_handler(self.get_conversation_handler())
