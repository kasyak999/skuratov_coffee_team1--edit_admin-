import logging
from datetime import date, datetime

from sqlalchemy.ext.asyncio import AsyncSession
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
)

from app.core.db import async_session_maker
from app.crud.reservation_crud import reservation_crud
from app.crud.shift_crud import shift_crud
from app.crud.user_crud import crud_user
from app.models.reservation import Status as ReservationStatus
from app.models.shift import Shift
from app.schemas.reservation_schema import ReservationUpdate
from app.tasks.activity_manager import activity_manager
from app.telegram_bot.commands import show_start_menu

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
SELECT_DATE, SELECT_SHIFT, CHANGE_BOOKING, SELECT_BARISTA = range(4)

logger = logging.getLogger(__name__)


class ChangeBookingHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –±–∞—Ä–∏—Å—Ç–∞."""

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
        self.reservation_crud = reservation_crud
        self.shift_crud = shift_crud
        self.user_crud = crud_user

    async def change_booking_start(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        query = update.callback_query
        if query:
            await query.answer()
            message = query.message
        else:
            message = update.message

        # –ü–æ–ª—É—á–∞–µ–º cafe_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        user_id = update.effective_user.id
        async with async_session_maker() as session:
            user = await self.user_crud.get_by_telegram_id(user_id, session)
            if not user or not user.cafe_id:
                await message.reply_text(
                    '–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–∞—Ñ–µ –∏–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.'
                )
                return ConversationHandler.END

            context.user_data['cafe_id'] = user.cafe_id

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É
        today = date.today()
        buttons = [
            [
                InlineKeyboardButton(
                    '–°–µ–≥–æ–¥–Ω—è', callback_data=f'select_date_{today}'
                ),
                InlineKeyboardButton(
                    '–ó–∞–≤—Ç—Ä–∞',
                    callback_data=(
                        f'select_date_{today.replace(day=today.day + 1)}'
                    ),
                ),
            ],
            [
                InlineKeyboardButton(
                    '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_change_booking'
                )
            ],
        ]
        keyboard = InlineKeyboardMarkup(buttons)

        if query:
            await query.edit_message_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:',
                reply_markup=keyboard,
            )
        else:
            await message.reply_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:',
                reply_markup=keyboard,
            )

        return SELECT_DATE

    async def select_date(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã."""
        query = update.callback_query
        await query.answer()

        selected_date = query.data.replace('select_date_', '')
        context.user_data['selected_date'] = selected_date

        return await self.show_shifts_for_date(update, context)

    async def show_shifts_for_date(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
        query = update.callback_query
        cafe_id = context.user_data['cafe_id']
        selected_date = context.user_data['selected_date']

        async with async_session_maker() as session:
            start_datetime = datetime.strptime(selected_date, '%Y-%m-%d')
            end_datetime = datetime.combine(
                start_datetime.date(), datetime.max.time()
            )

            shifts = await shift_crud.get_multi(
                session=session,
                cafe_id=cafe_id,
                start_time=start_datetime,
                end_time=end_datetime,
            )
            if not shifts:
                await query.edit_message_text(
                    '–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.',
                    reply_markup=None,
                )
                return await show_start_menu(update, context)

            buttons = []
            for shift in shifts:
                status = await self._get_shift_status(shift, session)
                btn_text = (
                    f'{shift.start_time.strftime("%H:%M")}-'
                    f'{shift.end_time.strftime("%H:%M")}'
                    f' {status}'
                )

                buttons.append([
                    InlineKeyboardButton(
                        btn_text, callback_data=f'select_shift_{shift.id}'
                    )
                ])

            buttons.append([
                InlineKeyboardButton(
                    '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_change_booking'
                )
            ])

            keyboard = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(
                f'–°–ª–æ—Ç—ã –Ω–∞ {selected_date}:\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:',
                reply_markup=keyboard,
            )

        return SELECT_SHIFT

    async def select_shift(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞."""
        query = update.callback_query
        await query.answer()

        shift_id = int(query.data.replace('select_shift_', ''))
        context.user_data['shift_id'] = shift_id

        async with async_session_maker() as session:
            shift = await self.shift_crud.get(shift_id, session)
            reservations = await self.reservation_crud.get_by_shift(
                shift_id, session
            )
            buttons = []
            if not reservations:
                buttons.append(
                    [
                        InlineKeyboardButton(
                            '‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ä–∏—Å—Ç–∞',
                            callback_data='assign_barista',
                        )
                    ],
                )
                message = (
                    f'–°–º–µ–Ω–∞ {shift.start_time.strftime("%H:%M")}-'
                    f'{shift.end_time.strftime("%H:%M")} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–≤–æ–±–æ–¥–Ω–∞.\n'
                    f'–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –±–∞—Ä–∏—Å—Ç—É:'
                )
            else:
                for reservation in reservations:
                    barista = await self.user_crud.get(
                        reservation.barista_id, session
                    )
                    buttons.append(
                        [
                            InlineKeyboardButton(
                                f'‚ùå –±—Ä–æ–Ω—å {barista.name}',
                                callback_data=f'remove_booking_{reservation.id}',
                            ),
                            InlineKeyboardButton(
                                'üîÑ –ó–∞–º–µ–Ω–∏—Ç—å',
                                callback_data=f'change_barista_{reservation.id}',
                            ),
                        ],
                    )

                    message = (
                        f'–°–º–µ–Ω–∞ {shift.start_time.strftime("%H:%M")}-'
                        f'{shift.end_time.strftime("%H:%M")}\n'
                        f'–¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:'
                    )

                if len(reservations) < shift.barista_count:
                    buttons.append(
                        [
                            InlineKeyboardButton(
                                '‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–∞—Ä–∏—Å—Ç–∞',
                                callback_data='assign_barista',
                            )
                        ],
                    )
            buttons.append([
                InlineKeyboardButton(
                    '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–º–µ–Ω', callback_data='back_to_shifts'
                )
            ])
            keyboard = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, reply_markup=keyboard)

        return CHANGE_BOOKING

    async def handle_booking_change(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        query = update.callback_query
        await query.answer()

        action = query.data
        shift_id = context.user_data['shift_id']

        if action == 'back_to_shifts':
            return await self.show_shifts_for_date(update, context)

        async with async_session_maker() as session:
            shift = await self.shift_crud.get(shift_id, session)

        if action.startswith('remove_booking_'):
            reservation_id = int(query.data.replace('remove_booking_', ''))
            context.user_data['reservation_id'] = reservation_id
            reservation = await self.reservation_crud.get(
                reservation_id, session
            )

            # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if reservation:
                barista = await self.user_crud.get(
                    reservation.barista_id, session
                )
                await self.reservation_crud.remove(reservation, session)
                await session.commit()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–∞—Ä–∏—Å—Ç–∞
                try:
                    activity_manager.delay(
                        chat_id=barista.telegram_id,
                        text=(
                            f'–í–∞—à–∞ –±—Ä–æ–Ω—å –Ω–∞ —Å–ª–æ—Ç '
                            f'{shift.start_time.strftime("%H:%M")}-'
                            f'{shift.end_time.strftime("%H:%M")} '
                            # f'{shift.date} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
                            f' –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
                        ),
                    )
                except Exception as e:
                    logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}')

                await query.edit_message_text(
                    '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                    reply_markup=None,
                )
            else:
                await query.edit_message_text(
                    '–û—à–∏–±–∫–∞: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.',
                    reply_markup=None,
                )

            # return ConversationHandler.END
            return await show_start_menu(update, context)

        if action.startswith('assign_barista'):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ä–∏—Å—Ç–∞
            baristas = await self.user_crud.get_multi_by_role(
                'barista', session
            )
            context.user_data['reservation_id'] = None
            async with async_session_maker() as session:
                shift = await self.shift_crud.get(shift_id, session)
            buttons = []
            for barista in baristas:
                buttons.append([
                    InlineKeyboardButton(
                        barista.name,
                        callback_data=f'select_barista_{barista.id}',
                    )
                ])

            buttons.append([
                InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_shift')
            ])

            keyboard = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–∏—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞:',
                reply_markup=keyboard,
            )

            return SELECT_BARISTA

        if action.startswith('change_barista_'):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ä–∏—Å—Ç–∞
            baristas = await self.user_crud.get_multi_by_role(
                'barista', session
            )
            reservation_id = int(query.data.replace('change_barista_', ''))
            context.user_data['reservation_id'] = reservation_id
            reservation = await self.reservation_crud.get(
                reservation_id, session
            )
            buttons = []
            for barista in baristas:
                buttons.append([
                    InlineKeyboardButton(
                        barista.name,
                        callback_data=f'select_barista_{barista.id}',
                    )
                ])

            buttons.append([
                InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_shift')
            ])

            keyboard = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–∏—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞:',
                reply_markup=keyboard,
            )

            return SELECT_BARISTA

        return await show_start_menu(update, context)

    async def select_barista(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –±–∞—Ä–∏—Å—Ç–∞ –¥–ª—è —Å–ª–æ—Ç–∞."""
        query = update.callback_query
        await query.answer()

        barista_id = int(query.data.replace('select_barista_', ''))
        shift_id = context.user_data['shift_id']
        reservation_id = context.user_data['reservation_id']
        old_reservation = None

        async with async_session_maker() as session:
            shift = await self.shift_crud.get(shift_id, session)
            barista = await self.user_crud.get(barista_id, session)

            if reservation_id:
                old_reservation = await self.reservation_crud.get(
                    reservation_id, session
                )
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if old_reservation:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –±–∞—Ä–∏—Å—Ç–∞
                old_barista = await self.user_crud.get(
                    old_reservation.barista_id, session
                )
                try:
                    activity_manager.delay(
                        chat_id=old_barista.telegram_id,
                        text=(
                            f'–í–∞—à–∞ –±—Ä–æ–Ω—å –Ω–∞ —Å–ª–æ—Ç '
                            f'{shift.start_time.strftime("%H:%M")}-'
                            f'{shift.end_time.strftime("%H:%M")} '
                            # f'{shift.date} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
                            f' –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
                        ),
                    )
                except Exception as e:
                    logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}')

                # –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                reservation_update = ReservationUpdate(
                    barista_id=barista_id, status='onconfirm'
                )
                await self.reservation_crud.update(
                    old_reservation, reservation_update, session
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                await self.reservation_crud.create_with_status(
                    barista_id, shift_id, 'onconfirm', session
                )
            await session.commit()
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –±–∞—Ä–∏—Å—Ç–∞
            try:
                activity_manager.delay(
                    chat_id=barista.telegram_id,
                    text=(
                        f'–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–ª–æ—Ç '
                        f'{shift.start_time.strftime("%H:%M")}-'
                        # f'{shift.end_time.strftime("%H:%M")} {shift.date}. '
                        f'{shift.end_time.strftime("%H:%M")}. '
                        f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –±—Ä–æ–Ω—å.'
                    ),
                )
            except Exception as e:
                logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}')

            await query.edit_message_text(
                f'–ë–∞—Ä–∏—Å—Ç–∞ {barista.name} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Å–ª–æ—Ç.',
                reply_markup=None,
            )

        return await show_start_menu(update, context)

    async def _get_shift_status(
        self, shift: Shift, session: AsyncSession
    ) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π."""
        await session.refresh(shift, ['reservations'])

        if not shift.reservations:
            return 'üü¢ –°–≤–æ–±–æ–¥–Ω–∞'

        status_labels = {
            'RESERVED': '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ',
            'ONCONFIRM': '–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏',
            'ATTENDED': '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª',
            'CANCELLED': '–æ—Ç–º–µ–Ω–µ–Ω–æ',
        }

        status_counts = {}
        for r in shift.reservations:
            status_name = r.status.name
            status_counts[status_name] = status_counts.get(status_name, 0) + 1

        status_stats = '\n' + '\n'.join(
            f'{status_labels[status]}: {count}'
            for status, count in sorted(status_counts.items())
        )

        active_reservations = [
            r
            for r in shift.reservations
            if r.status
            in [
                ReservationStatus.RESERVED,
                ReservationStatus.ONCONFIRM,
                ReservationStatus.ATTENDED,
            ]
        ]
        active_count = len(active_reservations)

        if active_count >= shift.barista_count:
            return f'üî¥ –ó–∞–ø–æ–ª–Ω–µ–Ω–∞{status_stats}'
        if active_count > 0:
            return (
                f'üü° –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–Ω—è—Ç–∞ {active_count}/{shift.barista_count}'
                # f'{status_stats}'
            )
        return f'üü¢ –°–≤–æ–±–æ–¥–Ω–∞{status_stats}'

    async def cancel_change_booking(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        query = update.callback_query
        await query.answer()

        await query.edit_message_text(
            '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.',
            reply_markup=None,
        )

        return await show_start_menu(update, context)

    def get_conversation_handler(self) -> ConversationHandler:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        return ConversationHandler(
            entry_points=[
                CommandHandler('change_booking', self.change_booking_start),
                CallbackQueryHandler(
                    self.change_booking_start, pattern='^change_booking$'
                ),
            ],
            states={
                SELECT_DATE: [
                    CallbackQueryHandler(
                        self.select_date, pattern='^select_date_'
                    ),
                    CallbackQueryHandler(
                        self.cancel_change_booking,
                        pattern='^cancel_change_booking$',
                    ),
                ],
                SELECT_SHIFT: [
                    CallbackQueryHandler(
                        self.select_shift, pattern='^select_shift_'
                    ),
                    CallbackQueryHandler(
                        self.cancel_change_booking,
                        pattern='^cancel_change_booking$',
                    ),
                ],
                CHANGE_BOOKING: [
                    CallbackQueryHandler(
                        self.handle_booking_change,
                        pattern='^(remove_booking_|change_barista_|assign_barista|back_to_shifts)',
                    ),
                ],
                SELECT_BARISTA: [
                    CallbackQueryHandler(
                        self.select_barista, pattern='^select_barista_'
                    ),
                    CallbackQueryHandler(
                        self.select_shift, pattern='^back_to_shift$'
                    ),
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel_change_booking)],
        )

    def setup_handlers(self, application: Application) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
        application.add_handler(self.get_conversation_handler())
